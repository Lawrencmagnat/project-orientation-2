(window.__LOADABLE_LOADED_CHUNKS__=window.__LOADABLE_LOADED_CHUNKS__||[]).push([[268],{"l6/Q":function(e,t,i){"use strict";i.r(t);var n=i("uGWv"),o=i("pCWb"),r=["true","false","undefined","null","Infinity","NaN"],c={defaultToken:"default",tokenPostfix:".codecademy-ts",keywords:["abstract","as","async","await","break","case","catch","class","continue","const","constructor","debugger","declare","default","delete","do","else","enum","export","extends","finally","for","from","function","get","if","implements","import","in","infer","instanceof","interface","is","keyof","let","module","namespace","never","new","package","private","protected","public","readonly","require","global","return","set","static","super","switch","symbol","this","throw","try","type","typeof","unique","var","void","while","with","yield","of"],primitives:r,typeKeywords:["any","boolean","number","object","string","undefined"],operators:["<=",">=","==","!=","===","!==","=>","+","-","**","*","/","%","++","--","<<","</",">>",">>>","&","|","^","!","~","&&","||","??","?",":","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=","@"],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,regexpctl:/[(){}\[\]\$\^|\-*+?\.]/,regexpesc:/\\(?:[bBdDfnrsStvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,whitespace:/[ \t\r\n]+/,validName:/[A-Za-z_$][\w$]*/,tokenizer:{root:[{include:"common"}],common:[{include:"@whitespace"},{include:"@definitions"},[/\<[\w\.]+/,{token:"delimiter.tag",next:"@tag"}],{regex:/(return)(\s*)(\{)/,action:[{token:"keyword"},{token:"white"},{token:"delimiter",next:"@bracketCountingProperty"}]},[/([A-Za-z_$][\w$]*)(:)/,["property","delimiter"]],[/[A-Za-z_$][\w$]*/,{cases:{"@typeKeywords":"keyword","@keywords":"keyword","@primitives":"primitive","@default":"identifier"}}],[/[{]/,"delimiter.bracket","@bracketCounting"],[/[\[]/,"delimiter.bracket","@arrayBracketCounting"],[/\/(?=([^\\\/]|\\.)+\/([gimsuy]*)(\s*)(\.|;|,|\)|\]|\}|$))/,{token:"regexp",bracket:"@open",next:"@regexp"}],[/[()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/!(?=([^=]|$))/,"delimiter"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],{include:"@numbers"},[/[;,]/,"delimiter"],[/[.]/,"delimiter","@attribute"],{include:"@strings"}],tag:[[/\<\/[\w\.]+\>/,{token:"delimiter.tag",next:"@pop"}],[/\>/,{token:"delimiter.tag",next:"@innerTag"}],[/\/\>/,{token:"delimiter.tag",next:"@pop"}],[/\w+/,"prop.definition"],[/\=/,"operator"],[/\{/,{token:"operator",next:"@propValue"}],{include:"@strings"}],propValue:[{include:"@common"},[/\}/,{token:"operator.lol",next:"@pop"}]],innerTag:[[/{/,"delimiter.bracket","@bracketCounting"],[/\w+/,"text"],[/\<\/[\w\.]+\>/,{token:"@rematch",next:"@pop"}],[/\<[\w\.]+/,{token:"delimiter.tag",next:"@tag"}]],whitespace:[[/[ \t\r\n]+/,"whitespace"],[/\/\*\*(?!\/)/,"comment.doc","@jsdoc"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],jsdoc:[[/[^\/*]+/,"comment.doc"],[/\*\//,"comment.doc","@pop"],[/[\/*]/,"comment.doc"]],numbers:[[/(@digits)[eE]([\-+]?(@digits))?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?/,"number.float"],[/0[xX](@hexdigits)n?/,"number.hex"],[/0[oO]?(@octaldigits)n?/,"number.octal"],[/0[bB](@binarydigits)n?/,"number.binary"],[/(@digits)n?/,"number"]],strings:[[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string_double"],[/'/,"string","@string_single"],[/`/,"string","@string_backtick"]],regexp:[[/(\{)(\d+(?:,\d*)?)(\})/,["regexp.escape.control","regexp.escape.control","regexp.escape.control"]],[/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/,["regexp.escape.control",{token:"regexp.escape.control",next:"@regexrange"}]],[/(\()(\?:|\?=|\?!)/,["regexp.escape.control","regexp.escape.control"]],[/[()]/,"regexp.escape.control"],[/@regexpctl/,"regexp.escape.control"],[/[^\\\/]/,"regexp"],[/@regexpesc/,"regexp.escape"],[/\\\./,"regexp.invalid"],[/(\/)([gimsuy]*)/,[{token:"regexp",bracket:"@close",next:"@pop"},"keyword.other"]]],regexrange:[[/-/,"regexp.escape.control"],[/\^/,"regexp.invalid"],[/@regexpesc/,"regexp.escape"],[/[^\]]/,"regexp"],[/\]/,{token:"regexp.escape.control",next:"@pop",bracket:"@close"}]],string_double:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]],string_single:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/'/,"string","@pop"]],string_backtick:[[/\$\{/,"delimiter","@bracketCounting"],[/[^\\`$]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/`/,"string","@pop"]],definitions:[[/(var|let|const) /,"keyword","@varDefinition"],[/(for|while) /,"keyword","@loopDefinition"],{include:"functionDefinitions"},[/(for|while)\(/,{token:"keyword",goBack:1,next:"@loopDefinition"}],{regex:/(class @validName\s*)(\{)/,action:[{token:"keyword"},{token:"delimiter",next:"@classDefinition"}]}],functionDefinitions:[["function ","keyword","@functionDefinition"],[/(get|set) \w+/,"keyword","@functionDefinition"]],varDefinition:[{include:"whitespace"},[/@validName/,"definition"],[/[,{}]/,"delimiter"],[/[;]/,"delimiter","@pop"],[/[=]/,{token:"delimiter",switchTo:"@varValue"}],[/[^a-zA-Z_$0-9]/,{token:"delimiter",goBack:1,next:"@pop"}]],varValue:[{include:"whitespace"},[/function/,{token:"keyword",switchTo:"@functionDefinition"}],[/\((?=.*\=\>)/,{token:"delimiter",switchTo:"@functionDefinition"}],[/[{]/,"delimiter","@bracketCountingProperty"],[/[,]/,{token:"delimiter",switchTo:"@varDefinition"}],[/;/,{token:"delimiter",next:"@pop"}],[/\b/,{token:"whitespace",next:"@pop"}],[/}/,{token:"",goBack:1,next:"@pop"}],{include:"common"}],functionDefinition:[{include:"whitespace"},[/@validName/,"definition"],[/[(),]/,"delimiter"],[/=(?=[^>])/,"delimiter","@functionValue"],[/[{]/,{token:"delimiter",switchTo:"@bracketCounting"}],[/[^a-zA-Z_$0-9]/,"delimiter","@pop"]],functionValue:[[/[,)]/,"delimiter","@pop"],{include:"bracketCounting"}],loopDefinition:[{include:"whitespace"},[/</,"delimiter"],[/\)/,"delimiter","@pop"],{include:"common"}],classDefinition:[{include:"whitespace"},{include:"functionDefinitions"},{include:"property"},{include:"bracketCounting"}],arrayBracketCounting:[[/\[/,"@brackets","@arrayBracketCounting"],[/\]/,"@brackets","@pop"],{include:"common"}],bracketCounting:[[/\{/,"delimiter.bracket","@bracketCounting"],[/\}/,"delimiter.bracket","@pop"],{include:"common"}],bracketCountingProperty:[[/\{/,"delimiter.bracket","@bracketCountingProperty"],[/\}/,"delimiter.bracket","@pop"],{include:"property"},{include:"common"}],property:[{include:"whitespace"},[/@validName/,"property"],[/[,]/,"delimiter"],[/[:]/,"delimiter","@propertyValue"],[/\(/,"delimiter","@propertyFuncValue"],[/\}/,"delimiter","@pop"],{include:"bracketCounting"},[/[^A-Za-z_$0-9]/,"delimiter","@pop"]],propertyValue:[[/[,]/,"delimiter","@pop"],[/[}]/,{token:"delimiter",goBack:1,next:"@pop"}],{include:"common"}],propertyFuncValue:[[/[,]/,"delimiter"],[/[{]/,{token:"delimiter",switchTo:"@bracketCounting"}],{include:"common"}],attribute:[[/@validName/,"property"],[/[}]/,{token:"",goBack:1,next:"@pop"}],[/[\]]/,{token:"",goBack:1,next:"@pop"}],[/\)/,{token:"",goBack:1,next:"@pop"}],[/[.]/,"delimiter"],[/;/,"@rematch","@pop"],[/[^A-Za-z_$0-9]/,"delimiter","@pop"]]}},a={defaultToken:"default",tokenPostfix:".codecademy-js",keywords:["async","await","break","case","catch","class","continue","const","debugger","default","delete","do","else","export","extends","finally","for","function","if","import","in","instanceof","let","new","return","super","switch","this","throw","try","typeof","var","void","while","with","yield"],primitives:r,typeKeywords:[],operators:c.operators,symbols:c.symbols,escapes:c.escapes,digits:c.digits,octaldigits:c.octaldigits,binarydigits:c.binarydigits,hexdigits:c.hexdigits,regexpctl:c.regexpctl,regexpesc:c.regexpesc,tokenizer:c.tokenizer,whitespace:c.whitespace,validName:c.validName};t.default=function javascript(e){return Object(o.a)(e,n.h,function createConfiguration(e){return{wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],onEnterRules:[{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,afterText:/^\s*\*\/$/,action:{indentAction:e.languages.IndentAction.IndentOutdent,appendText:" * "}},{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,action:{indentAction:e.languages.IndentAction.None,appendText:" * "}},{beforeText:/^(\t|(\ \ ))*\ \*(\ ([^\*]|\*(?!\/))*)?$/,action:{indentAction:e.languages.IndentAction.None,appendText:"* "}},{beforeText:/^(\t|(\ \ ))*\ \*\/\s*$/,action:{indentAction:e.languages.IndentAction.None,removeText:1}}],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string","comment"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}],folding:{markers:{start:new RegExp("^\\s*//\\s*#?region\\b"),end:new RegExp("^\\s*//\\s*#?endregion\\b")}}}}(e),a),{}}}}]);
//# sourceMappingURL=268.570628a4d2bf64845d61.chunk.js.map